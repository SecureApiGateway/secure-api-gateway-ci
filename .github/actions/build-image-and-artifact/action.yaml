name: Build Image and Artifact
description: Common steps to build a docker image and a maven artifact
inputs:
  checkoutBranch:
    description: What branch of the repo to checkout
    required: false
  checkoutCode:
    description: Wherever or not to checkout the code for the repo
    required: true
  dockerBuildCommands:
    description: What commands to run to build the image
    required: true
  FR_ARTIFACTORY_USER:
    description: What user to use to auth to Maven Server
    required: true
  FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD:
    description: What user password to use to auth to Maven Server
    required: true
  mavenBuildCommands:
    description: Maven commands to be ran to product the artifact
    required: true
  repositoryName:
    description: What repository to checkout
    required: true
runs:
  using: composite
  steps:
    - name: Determine what Branch of code to check out
      shell: bash
      run: |
        if [ ${{ inputs.checkoutCode }} == 'true' ]; then
          if [[ "${{ inputs.checkoutBranch }}" ]]; then
            echo CHECKOUTBRANCHCODE=true >> ${GITHUB_ENV}
          else
            echo CHECKOUTMAINCODE=true >> ${GITHUB_ENV}
          fi
        else
          echo CHECKOUTMAINCODE=false >> ${GITHUB_ENV}
          echo CHECKOUTBRANCHCODE=false >> ${GITHUB_ENV}
        fi
    - name: Checkout Main Branch Code
      uses: actions/checkout@v4
      if: env.CHECKOUTMAINCODE == 'true'
      with:
        repository: ${{ inputs.repositoryName }}
        path: ${{ inputs.repositoryName }}
    - name: Checkout Branch Code
      uses: actions/checkout@v4
      if: env.CHECKOUTBRANCHCODE == 'true'
      with:
        repository: ${{ inputs.repositoryName }}
        path: ${{ inputs.repositoryName }}
        ref: ${{ inputs.checkoutBranch }}
    - name: Set Cache with Protected Repository
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        architecture: x64
        cache: 'maven'
        server-id: forgerock-internal-releases # protected repo id to get the protected dependencies
        server-username: FR_ARTIFACTORY_USER # env variable for username in deploy
        server-password: FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD # env variable for token in deploy
      env:
        FR_ARTIFACTORY_USER: ${{ inputs.FR_ARTIFACTORY_USER }}
        FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ inputs.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
    - name: Get Version
      shell: bash
      run: |
        echo "VERSION=$( cd ${{ inputs.repositoryName }} && mvn help:evaluate -Dexpression=project.version -q -DforceStdout )" >> $GITHUB_ENV
        echo "MAVEN_SERVER_COMMUNITY=maven.forgerock.org-community" >> $GITHUB_ENV
      env:
        FR_ARTIFACTORY_USER: ${{ inputs.FR_ARTIFACTORY_USER }}
        FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ inputs.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
    - name: Push to community snapshot if version contains snapshot
      if: contains( env.VERSION, 'SNAPSHOT')
      shell: bash
      run: |
        echo "MAVEN_SERVER_COMMUNITY=maven.forgerock.org-community-snapshots" >> $GITHUB_ENV
    - name: Build Core Code + Test + Create Docker Image
      shell: bash
      run: |
        cd ${{ inputs.repositoryName }}
        ${{ inputs.dockerBuildCommands }}
      env:
        FR_ARTIFACTORY_USER: ${{ inputs.FR_ARTIFACTORY_USER }}
        FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ inputs.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
    - name: Set Cache with Community Repository
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        architecture: x64
        cache: 'maven'
        server-id: ${{ env.MAVEN_SERVER_COMMUNITY }} # community repo to publish the java artifact
        server-username: FR_ARTIFACTORY_USER # env variable for username in deploy
        server-password: FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD # env variable for token in deploy
      env:
        FR_ARTIFACTORY_USER: ${{ inputs.FR_ARTIFACTORY_USER }}
        FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ inputs.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
    - name: Deploy Core Maven Artifact Package
      shell: bash
      run: |
        cd ${{ inputs.repositoryName }}
        ${{ inputs.mavenBuildCommands }}
      env:
        FR_ARTIFACTORY_USER: ${{ inputs.FR_ARTIFACTORY_USER }}
        FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ inputs.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}