name: Merge - Build and Deploy
on:
  workflow_call:
    inputs:
      componentName:
        description: The component name using the workflow
        required: true
        type: string
      dockerTag:
        description: The Tag to be associated with the new docker image (optional)
        required: false
        type: string
      sapigType:
        description: The SAPIG Type for the component (optional)
        required: false
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          if grep -q TAG_REPLACE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            sed -i -e 's/TAG_REPLACE/'${{ inputs.dockerTag }}'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
          fi
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Auth GCP, SDK & Artifact Registry
      - name: Authentication
        uses: ./secure-api-gateway-ci/.github/actions/authentication
        if: env.STEPS_MERGE_AUTHENTICATE == 'true'
        with:
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ env.GAR_LOCATION }}
      # Set Maven Config
      - name: Set Maven Config
        uses: ./secure-api-gateway-ci/.github/actions/set-maven-config
        if: env.STEPS_MERGE_SET_MAVEN_CONFIG == 'true'
        with:
          cache: ${{ env.CACHE }}
          javaArchitecture: ${{ env.JAVA_ARCHITECTURE }}
          javaDistribution: ${{ env.JAVA_DISTRIBUTION }}
          javaVersion: ${{ env.JAVA_VERSION }}
          mavenServerID: ${{ env.MAVEN_SERVER_ID }}
          repositoryName: ${{ inputs.componentName }}
          updateMavenServer: ${{ env.UPDATE_MERGE_MAVEN_SERVER_ID }}
      # Run Initial Tests
      - name: Run Pre Build Tests
        if: env.STEPS_MERGE_RUN_INITIAL_TESTS == 'true'
        run : |
          cd ${{ inputs.componentName }}
          ${{ env.STEPS_MERGE_RUN_INITIAL_TESTS_COMMAND }}
      # Builds Docker Image
      - name: Build Image
        uses: ./secure-api-gateway-ci/.github/actions/build-image
        if: env.STEPS_MERGE_BUILD_DOCKER_IMAGE == 'true'
        with:
          checkoutCode: false
          dockerBuildCommands: ${{ env.STEPS_MERGE_BUILD_DOCKER_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
      # Set Maven Config
      - name: Set Maven Config
        uses: ./secure-api-gateway-ci/.github/actions/set-maven-config
        if: env.STEPS_MERGE_SET_MAVEN_CONFIG_SECOND == 'true'
        with:
          cache: ${{ env.CACHE }}
          javaArchitecture: ${{ env.JAVA_ARCHITECTURE }}
          javaDistribution: ${{ env.JAVA_DISTRIBUTION }}
          javaVersion: ${{ env.JAVA_VERSION }}
          mavenServerID: ${{ env.MAVEN_SERVER_ID_SECOND }}
          repositoryName: ${{ inputs.componentName }}
          updateMavenServer: ${{ env.UPDATE_MERGE_MAVEN_SERVER_ID_SECOND }}
      # Build Maven Project
      - name: Build Maven Project
        uses: ./secure-api-gateway-ci/.github/actions/build-artifact
        if: env.STEPS_MERGE_BUILD_MAVEN_PROJECT == 'true'
        with:
          checkoutCode: false
          mavenBuildCommands: ${{ env.STEPS_MERGE_BUILD_MAVEN_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: build
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          if [ -n ${{ inputs.sapigType }} ]; then
            echo "SAPIG_TYPE=${{ inputs.sapigType }}" >> $GITHUB_ENV
          fi
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Deploy to Environment
      - name: Deploy to Environment
        uses: ./secure-api-gateway-ci/.github/actions/deploy-to-env
        if: env.STEPS_MERGE_DEPLOY_CHANGES == 'true' && github.actor != 'dependabot[bot]'
        with:
          argoServiceName: ${{ env.ARGO_SERVICE_NAME }}
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: latest
          gitTrigger: merge
          serviceName: ${{ env.SERVICE_NAME }}
          sapigType: ${{ env.SAPIG_TYPE }}
      # Run Functional Tests
      - name: Run Functional Tests
        uses: ./secure-api-gateway-ci/.github/actions/run-functional-tests
        if: env.STEPS_MERGE_RUN_FUNCTIONAL_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ inputs.dockerTag }}
          serviceName: ${{ env.SERVICE_NAME }}
          testsVersion: ${{ env.TESTS_VERSION }}
      # Run Conformance DCR Tests
      - name: Run Conformance DCR
        uses: ./secure-api-gateway-ci/.github/actions/run-conformance-dcr
        if: env.STEPS_MERGE_RUN_DCR_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: latest
          serviceName: ${{ env.SERVICE_NAME }}