name: Merge - Build and Deploy
on:
  workflow_call:
    inputs:
      componentName:
        description: The component name using the workflow
        required: true
        type: string
      dockerTag:
        description: The Tag to be associated with the new docker image (optional)
        required: false
        type: string
      sapigType:
        description: The SAPIG Type for the component (optional)
        required: false
        type: string
      componentBranch:
        description: The repository branch for component (optional)
        required: false
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          # We may have more than one 'main' branch active at one time, need to be able to identify the different branches and create different 'latest' docker tags 
          if [[ "${{ inputs.componentBranch }}" ]]; then
            if [[ "${{ inputs.componentBranch }}" =~ v[0-9] ]]; then
              # Only going up to v999, should be more than enough as only on v4 at time of writing
              branch=$(echo ${{ inputs.componentBranch }} | grep -oP "v[0-9]{1,3}") 
              sed -i -e 's/LATESTTAG_REPLACE/'latest-$branch'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
              sed -i -e 's/DEVTAG_REPLACE/'dev-$branch'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
            elif [[ "${{ inputs.componentBranch }}" == "main" || "${{ inputs.componentBranch }}" == "master" || "${{ inputs.componentBranch }}" == "sbat-master" ]]; then
              sed -i -e 's/LATESTTAG_REPLACE/'latest'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
              sed -i -e 's/DEVTAG_REPLACE/'dev'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
            else
              echo "ERROR: Unknown branch - Merge workflow should only run for Master | Main or ob-V# Branches"
              exit 1
            fi
          fi
          # What Docker Tag to build
          if grep -q TAG_REPLACE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            sed -i -e 's/TAG_REPLACE/'${{ inputs.dockerTag }}'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
          fi
          # Once all replacements are done, load all the variables in the .env file to github
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Auth GCP, SDK & Artifact Registry
      - name: Authentication
        uses: ./secure-api-gateway-ci/.github/actions/authentication
        if: env.STEPS_MERGE_AUTHENTICATE == 'true'
        with:
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ env.GAR_LOCATION }}
      # Set Maven Config
      - name: Set Maven Build Config
        uses: ./secure-api-gateway-ci/.github/actions/set-maven-config
        if: env.STEPS_MERGE_SET_MAVEN_CONFIG == 'true'
        with:
          cache: ${{ env.CACHE }}
          javaArchitecture: ${{ env.JAVA_ARCHITECTURE }}
          javaDistribution: ${{ env.JAVA_DISTRIBUTION }}
          javaVersion: ${{ env.JAVA_VERSION }}
      # Run Initial Tests
      - name: Run Pre Build Tests
        if: env.STEPS_MERGE_RUN_INITIAL_TESTS == 'true'
        run : |
          cd ${{ inputs.componentName }}
          ${{ env.STEPS_MERGE_RUN_INITIAL_TESTS_COMMAND }}
      # Build Maven Project
      - name: Build Maven Project
        uses: ./secure-api-gateway-ci/.github/actions/build-artifact
        if: env.STEPS_MERGE_BUILD_MAVEN_PROJECT == 'true'
        with:
          checkoutCode: false
          mavenBuildCommands: ${{ env.STEPS_MERGE_BUILD_MAVEN_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
      # Upload Maven Artifacts
      - name: Upload Maven Artifacts
        uses: ./secure-api-gateway-ci/.github/actions/build-artifact
        if: env.STEPS_MERGE_UPLOAD_MAVEN_PROJECT == 'true'
        with:
          checkoutCode: false
          mavenBuildCommands: ${{ env.STEPS_MERGE_UPLOAD_MAVEN_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
      # Builds Docker Image
      - name: Build Image
        uses: ./secure-api-gateway-ci/.github/actions/build-image
        if: env.STEPS_MERGE_BUILD_DOCKER_IMAGE == 'true'
        with:
          checkoutCode: false
          dockerBuildCommands: ${{ env.STEPS_MERGE_BUILD_DOCKER_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: build
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          if [ -n ${{ inputs.sapigType }} ]; then
            echo "SAPIG_TYPE=${{ inputs.sapigType }}" >> $GITHUB_ENV
          fi
          # Need to know if the change is for Dev-cdk or Dev-aic
          if [[ "${{ inputs.componentBranch }}" ]]; then
            if [[ "${{ inputs.componentBranch }}" =~ v[0-9] ]]; then
              branch=$(echo ${{ inputs.componentBranch }} | grep -oP "v[0-9]{1,3}")
              echo "TARGET_ENV=dev-cdk" >> $GITHUB_ENV
              echo "LATEST_TAG=latest-$branch" >> $GITHUB_ENV
            else
              echo "TARGET_ENV=dev-aic" >> $GITHUB_ENV
              echo "LATEST_TAG=latest" >> $GITHUB_ENV
            fi
          fi
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Deploy to Environment
      - name: Deploy to Environment
        uses: ./secure-api-gateway-ci/.github/actions/deploy-to-env
        if: env.STEPS_MERGE_DEPLOY_CHANGES == 'true' && github.actor != 'dependabot[bot]'
        with:
          argoServiceName: ${{ env.ARGO_SERVICE_NAME }}
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ env.LATEST_TAG }}
          gitTrigger: merge
          serviceName: ${{ env.SERVICE_NAME }}
          sapigType: ${{ env.SAPIG_TYPE }}
          targetEnv: ${{ env.TARGET_ENV }}
      # Run Functional Tests
      - name: Run Functional Tests
        uses: ./secure-api-gateway-ci/.github/actions/run-functional-tests
        if: env.STEPS_MERGE_RUN_FUNCTIONAL_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ inputs.dockerTag }}
          serviceName: ${{ env.SERVICE_NAME }}
          targetEnv: ${{ env.TARGET_ENV }}
          testsVersion: ${{ env.TESTS_VERSION }}
      # Run Conformance DCR Tests
      - name: Run Conformance DCR
        uses: ./secure-api-gateway-ci/.github/actions/run-conformance-dcr
        if: env.STEPS_MERGE_RUN_DCR_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ env.LATEST_TAG }}
          serviceName: ${{ env.SERVICE_NAME }}