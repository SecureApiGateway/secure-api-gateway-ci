name: OpenIG Nightly Core - Build, Deploy & Test
on:
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        uses: ./.github/actions/authentication
        with:
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ vars.GAR_LOCATION }}
      # Set Maven Config
      - name: Set Maven Config
        uses: ./.github//actions/set-maven-config
        with:
          javaArchitecture: x64
          javaDistribution: zulu
          javaVersion: 17
      # Build FAPI-PEP-AS with Latest IG
      - name: Call build-image-and-artifact for FAPI-PEP-AS with Latest IG
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: ${{ vars.LATEST_FAPI_PEP_AS_SAPIG_BRANCH }}
          checkoutCode: true
          dockerBuildCommands: make clean && make docker tag=latestig setlatest=false mavenArgs="-Dopenig.version=${{ vars.LATEST_IG_ARTIFACT_VERSION }}" dockerArgs="--build-arg base_image=${{ vars.LATEST_IG_DOCKER_IMAGE }}"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-fapi-pep-as
      # Build FAPI-PEP-RS-CORE with Latest IG
      - name: Call build-image-and-artifact for FAPI-PEP-RS-Core with Latest IG
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: ${{ vars.LATEST_FAPI_PEP_RS_CORE_SAPIG_BRANCH }}
          checkoutCode: true
          dockerBuildCommands: make clean && make docker tag=latestig setlatest=false mavenArgs="-Dopenig.version=${{ vars.LATEST_IG_ARTIFACT_VERSION }}" dockerArgs="--build-arg base_image=${{ vars.LATEST_IG_DOCKER_IMAGE }}"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-fapi-pep-rs-core
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    if: needs.build.result == 'success'
    needs: build
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        uses: ./.github/actions/authentication
        with:
          gcpKey: ${{ secrets.DEV_GCP_KEY }}
          garLocation: ${{ vars.GAR_LOCATION }}
      # Auth GKE
      - name: Authenticate to GKE
        uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
        with:
          cluster_name: ${{ vars.CLUSTER_NAME }}
          location: ${{ vars.CLUSTER_REGION }}
          project_id: ${{ vars.CLUSTER_PROJECT }}
      # Set IP to Whitelist
      - name: Add Build Runner IP to Whitelist
        run: |
          RUNNER_IP=$(curl -s ipinfo.io/ip)
          CIDR=$(gcloud container clusters describe ${{ vars.CLUSTER_NAME }} --region=${{ vars.CLUSTER_REGION }} --project ${{ vars.CLUSTER_PROJECT }} --format json | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ',')
          if [[ $CIDR != *$RUNNER_IP* ]]; then
            gcloud container clusters update ${{ vars.CLUSTER_NAME }} --region=${{ vars.CLUSTER_REGION }} --project ${{ vars.CLUSTER_PROJECT }} --enable-master-authorized-networks --master-authorized-networks="$CIDR$RUNNER_IP/32"
          fi
      # Delete Current IG Pod from Cluster
      - name: Delete Current IG Pod
        run: |
          kubectl delete deployment ${{ vars.OPENIG_NIGHTLY_FAPI_PEP_AS_POD }} -n ${{ vars.OPENIG_NIGHTLY_CORE_NAMESPACE }} --wait=true
          kubectl delete deployment ${{ vars.OPENIG_NIGHTLY_FAPI_PEP_RS_CORE_POD }} -n ${{ vars.OPENIG_NIGHTLY_CORE_NAMESPACE }} --wait=true
      # Remove IP from Whitelist - to be added in
      - name: Remove Build Runner IP from Whitelist
        run: |
          RUNNER_IP=$(curl -s ipinfo.io/ip)
          CIDR=$(gcloud container clusters describe ${{ vars.CLUSTER_NAME }} --region=${{ vars.CLUSTER_REGION }} --project ${{ vars.CLUSTER_PROJECT }} --format json | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ',')
          if [[ $CIDR == *$RUNNER_IP* ]]; then
            NEW_CIDR=$(echo $CIDR | sed s#$RUNNER_IP/32,##)
            gcloud container clusters update ${{ vars.CLUSTER_NAME }} --region=${{ vars.CLUSTER_REGION }} --project ${{ vars.CLUSTER_PROJECT }} --enable-master-authorized-networks --master-authorized-networks="$NEW_CIDR"
          fi
  test-functional:
    name: Test - Functional
    runs-on: ubuntu-22.04
    if: needs.deploy.result == 'success'
    needs: deploy
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      - name: Run Functional Tests
        uses: ./.github/actions/run-functional-tests
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: github-actions-trigger-functionaltest-latest
          cfPipelineName: SAPIG-devenv/openig-nightly-core-functional-tests
          cfPipelineBranch: main
          dockerTag: latest
          serviceName: uk-core-functional-tests
          testsVersion: test
  test-dcr:
    name: Test - DCR
    runs-on: ubuntu-22.04
    if: needs.deploy.result == 'success'
    needs: deploy
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      # Run Conformance DCR Tests
      - name: Run Conformance DCR
        uses: ./.github/actions/run-conformance-dcr
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: github-actions-trigger-dcrtest-latest
          cfPipelineName: SAPIG-devenv/openig-nightly-core-dcr-conformance-tests
          cfPipelineBranch: sbat-master
          dockerTag: latest
          serviceName: uk-conformance-dcr
          sortCFTrigger: false