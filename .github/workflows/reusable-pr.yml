name: Pull Request - Build and Deploy
on:
  workflow_call:
    inputs:
      componentName:
        description: The component name using the workflow
        required: true
        type: string
      dockerTag:
        description: The Tag to be associated with the new docker image (optional)
        required: false
        type: string
      mavenArg:
        description: Maven Arguments to pass to the build command (mainly used for jar versions override) (optional)
        required: false
        type: string
      sapigType:
        description: The SAPIG Type for the component (optional)
        required: false
        type: string
jobs:
  check-dcr:
    runs-on: ubuntu-latest
    container: golang:1.17-alpine3.15
    name: Check DCR PR Integrity
    if: inputs.componentName == 'conformance-dcr'
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Build Changes
      - name: Install packages
        run: |
          cd ${{ inputs.componentName }}
          apk update && apk add git make bash curl
      - name: Make Tools
        run: |
          cd ${{ inputs.componentName }}
          make tools
      - name: Build Project
        run: |
          cd ${{ inputs.componentName }}
          make build
      - name: Test Project
        run: |
          cd ${{ inputs.componentName }}
          make test
  build:
    runs-on: ubuntu-latest
    name: Build
    if: ${{ always() }}
    needs: check-dcr
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          # Sapig Type is optional so need to set it as null if not in use
          sapigType=${{ inputs.sapigType || null }}
          # Maven Args is optional so need to set itas null if not in use
          mavenArg=${{ inputs.mavenArg || null }}
          # Use dockerTag input to specifty what Docker Tag to build, overriding TAG_REPLACE in the .env file
          if grep -q TAG_REPLACE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            sed -i -e 's/TAG_REPLACE/'${{ inputs.dockerTag }}'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
          fi
          # Kustomize folders will be different based off of what sapig type is being built, need to use sapigType if not null to declare what folder in needed
          if grep -q KUSTOMIZE_DIR_REPLACE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            case $sapigType in
              core)
                kustomiseDir="core/kustomize/overlay/dev"
                ;;
              ob)
                kustomiseDir="ob/kustomize/overlay/dev"
                ;;
              test-trusted-directory)
                kustomiseDir="test-trusted-directory/kustomize/overlay/dev"
                ;;
            esac
            sed -i -e "s|KUSTOMIZE_DIR_REPLACE|$kustomiseDir|g" secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
          fi
          # We are uploading some build artifacts to maven with a [VERSION]-[PR_NUMBER]-SNAPSHOT format, need to override SNAPSHOT_REPLACE in the env file
          if grep -q SNAPSHOT_REPLACE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            # Create the snapshot version '[VERSION]-[PR_NUMBER]-SNAPSHOT'
            # Get the current version from the pom.xml file
            pomVersion=$(cd ${{ inputs.componentName }} && mvn help:evaluate -Dexpression=revision -q -DforceStdout)
            # Remove SNAPSHOT from the retrieved version if it exists
            if [[ "$pomVersion" =~ "-SNAPSHOT" ]]; then
              pomVersion=${pomVersion/-SNAPSHOT/""}
            fi
            # Build the new version from the retrieved version and docker tag and add snapshot to the end
            pomVersion="$pomVersion-${{ inputs.dockerTag}}-SNAPSHOT"
            # Override SNAPSHOT_REPLACE in the env file with the built version
            sed -i -e 's/SNAPSHOT_REPLACE/'$pomVersion'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
            echo STEPS_PR_OUTPUT_SNAPSHOT_VERSION="true" >> $GITHUB_ENV
            echo STEPS_PR_SNAPSHOT_VERSION=$pomVersion >> $GITHUB_ENV
          fi
          
          # Replace the MAVEN_ARG_OVERRIDE placeholder if it exists
          if grep -q MAVEN_ARG_OVERRIDE secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env; then
            if [[ -n "$mavenArg" ]]; then
              sed -i -e 's/MAVEN_ARG_OVERRIDE/'mavenArgs=\"-Dopenig.version=${{ inputs.mavenArg }}\"'/g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
            else
                # Delete the MAVEN_ARG_OVERRIDE if no mavenArg input has been supplied
                sed -i -e 's/MAVEN_ARG_OVERRIDE//g' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env
            fi
          fi
          # Once all replacements are done, load all the variables in the .env file to github
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Auth GCP, SDK & Artifact Registry
      - name: Authentication
        uses: ./secure-api-gateway-ci/.github/actions/authentication
        if: env.STEPS_PR_AUTHENTICATE == 'true'
        with:
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ env.GAR_LOCATION }}
      # Set Maven Config
      - name: Set Maven Config
        uses: ./secure-api-gateway-ci/.github/actions/set-maven-config
        if: env.STEPS_PR_SET_MAVEN_CONFIG == 'true'
        with:
          cache: ${{ env.CACHE }}
          javaArchitecture: ${{ env.JAVA_ARCHITECTURE }}
          javaDistribution: ${{ env.JAVA_DISTRIBUTION }}
          javaVersion: ${{ env.JAVA_VERSION }}
      # Set Node Config
      - name: Set Node Config
        uses: ./secure-api-gateway-ci/.github/actions/set-node-config
        if: env.STEPS_PR_SET_NODE_CONFIG == 'true'
        with:
          cache: ${{ env.CACHE }}
          cacheDependencyPath: ${{ env.CACHE_DEP_PATH }}
          nodeVersion: ${{ env.NODE_VERSION }}
      # Run Lint
      - name: Run Lint
        if: env.STEPS_PR_RUN_LINT == 'true'
        working-directory: ${{ inputs.componentName }}
        run : |
          ${{ env.STEPS_PR_RUN_LINT_COMMAND }}
      # Run Copyright Test
      - name: Run Copyright Check
        if: env.STEPS_PR_RUN_COPYRIGHT_TESTS == 'true'
        uses: ./secure-api-gateway-ci/.github/actions/check-copyright
        with:
          checkoutCode: false
          repositoryName: ${{ inputs.componentName }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
      # Run Initial Tests
      - name: Run Pre Build Tests
        if: env.STEPS_PR_RUN_INITIAL_TESTS == 'true'
        run : |
          cd ${{ inputs.componentName }}
          ${{ env.STEPS_PR_RUN_INITIAL_TESTS_COMMAND }}
      # Builds Docker Image
      - name: Build Image
        uses: ./secure-api-gateway-ci/.github/actions/build-image
        if: env.STEPS_PR_BUILD_DOCKER_IMAGE == 'true'
        with:
          checkoutCode: false
          dockerBuildCommands: ${{ env.STEPS_PR_BUILD_DOCKER_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
        # Builds Maven Project
      - name: Build Maven Project
        uses: ./secure-api-gateway-ci/.github/actions/build-artifact
        if: env.STEPS_PR_BUILD_MAVEN_PROJECT == 'true'
        with:
          checkoutCode: false
          mavenBuildCommands: ${{ env.STEPS_PR_BUILD_MAVEN_COMMANDS }}
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: ${{ inputs.componentName }}
        # Output the snapshot version in the log
      - name: Output Snapshot Version
        if: env.STEPS_PR_OUTPUT_SNAPSHOT_VERSION == 'true'
        run: |
          echo Version uploaded to maven: $STEPS_PR_SNAPSHOT_VERSION
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: build
    if: always() && !cancelled() && !contains(needs.*.result, 'failure')
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          if [ -n ${{ inputs.sapigType }} ]; then
            echo "SAPIG_TYPE=${{ inputs.sapigType }}" >> $GITHUB_ENV
          fi
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      - name: Get Branch Name
        if: env.STEPS_PR_GET_BRANCH_NAME == 'true'
        id: branch-name
        uses: tj-actions/branch-names@v7
      # Deploy to Environment
      - name: Deploy to Environment
        uses: ./secure-api-gateway-ci/.github/actions/deploy-to-env
        if: env.STEPS_PR_DEPLOY_CHANGES == 'true' && github.actor != 'dependabot[bot]'
        with:
          argoServiceName: ${{ env.ARGO_SERVICE_NAME }}
          branchName: ${{ steps.branch-name.outputs.current_branch || null }}
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          changeBranch: ${{ env.STEPS_PR_GET_BRANCH_NAME }}
          dockerTag: ${{ inputs.dockerTag }}
          gitTrigger: pr
          serviceName: ${{ env.SERVICE_NAME }}
          sapigType: ${{ env.SAPIG_TYPE }}
          testTrustedDirectoryArgoServiceName: ${{ env.TEST_TRUSTED_DIRECTORY_ARGO_SERVICE_NAME || null }}
          testTrustedDirectoryServiceName: ${{ env.TEST_TRUSTED_DIRECTORY_SERVICE_NAME || null }}
      # Run Functional Tests
      - name: Run Functional Tests
        uses: ./secure-api-gateway-ci/.github/actions/run-functional-tests
        if: env.STEPS_PR_RUN_FUNCTIONAL_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ inputs.dockerTag }}
          serviceName: pr/${{ env.SERVICE_NAME }}
          testsVersion: ${{ env.TESTS_VERSION }}
      # Run Conformance DCR Tests
      - name: Run Conformance DCR
        uses: ./secure-api-gateway-ci/.github/actions/run-conformance-dcr
        if: env.STEPS_PR_RUN_DCR_TESTS == 'true' && github.actor != 'dependabot[bot]'
        with:
          cfAPIKey: ${{ secrets.CF_API_KEY }}
          cfTriggerName: ${{ env.CF_TRIGGER_NAME }}
          cfPipelineName: ${{ env.CF_PIPELINE_NAME }}
          cfPipelineBranch: ${{ env.CF_PIPELINE_BRANCH }}
          dockerTag: ${{ inputs.dockerTag }}
          serviceName: pr/${{ env.SERVICE_NAME }}
          sortCFTrigger: true
  pre-merge:
    runs-on: ubuntu-latest
    name: Pre Merge Checks
    needs: deploy
    if: always() && !cancelled() && !contains(needs.*.result, 'failure')
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Checkout Calling Repo
      - name: Checkout Calling Repo
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.componentName }}
          repository: SecureApiGateway/${{ inputs.componentName }}
      # Prepare Environment
      - name: Prepare Environment
        run: |
          if [ -n ${{ inputs.sapigType }} ]; then
            echo "SAPIG_TYPE=${{ inputs.sapigType }}" >> $GITHUB_ENV
          fi
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Set Maven Config
      - name: Set Maven Config
        uses: ./secure-api-gateway-ci/.github/actions/set-maven-config
        if: env.STEPS_PR_SET_MAVEN_CONFIG == 'true'
        with:
          cache: ${{ env.CACHE }}
          javaArchitecture: ${{ env.JAVA_ARCHITECTURE }}
          javaDistribution: ${{ env.JAVA_DISTRIBUTION }}
          javaVersion: ${{ env.JAVA_VERSION }}
      # PR Artifacts Build
      - name: Check for PR Artifacts
        if: env.STEPS_PR_SET_MAVEN_CONFIG == 'true'
        run: |
          pomVersion=$(cd ${{ inputs.componentName }} && mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          commonBomVersion=$(cd ${{ inputs.componentName }} && mvn help:evaluate -Dexpression=uk.bom.version -q -DforceStdout)
          rsConsentVersion=$(cd ${{ inputs.componentName }} && mvn help:evaluate -Dexpression=consent.api.version -q -DforceStdout)
          if [[ "$pomVersion" =~ "pr-" || "$commonBomVersion" =~ "pr-" || "$rsConsentVersion" =~ "pr-" ]]; then
            echo "Error: PR Atrifact version detected, failing the pre merge checks"
            exit 1
          fi
