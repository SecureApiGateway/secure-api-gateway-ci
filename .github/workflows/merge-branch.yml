name: Merge - Merge Source Branch to Target Branch
on:
  workflow_call:
    inputs:
      componentName:
        description: The component name using the workflow
        required: true
        type: string
      sourceBranch:
        description: Where the merge code is coming from
        required: true
        type: string
      targetBranch:
        description: Where the code is going
        required: true
        type: string
jobs:
  merge:
    runs-on: ubuntu-22.04
    name: Merge
    steps:
      # Checkout CI Repo
      - name: Checkout CI Repo
        uses: actions/checkout@v4
        with:
          path: secure-api-gateway-ci
          repository: SecureApiGateway/secure-api-gateway-ci
      # Prepare Environment
      - name: Prepare Environment
        run: |
          # Once all replacements are done, load all the variables in the .env file to github
          grep -v '^#' secure-api-gateway-ci/component-config/${{ inputs.componentName }}.env >> $GITHUB_ENV
      # Checkout Calling Repo Target Branch
      - name: Checkout Calling Repo
        if: env.STEPS_REBASE_ENABLED == 'true'
        uses: actions/checkout@v4
        with:
          repository: SecureApiGateway/${{ inputs.componentName }}
          path: ${{ inputs.componentName }}
          ref: ${{ inputs.targetBranch }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        if: env.STEPS_REBASE_ENABLED == 'true'
        uses: ./secure-api-gateway-ci/.github/actions/authentication
        with:
          gcpKey: ${{ secrets.GCP_SECRET_READ }}
          garLocation: ${{ vars.GAR_LOCATION }}
      - name: Import GPG Key
        if: env.STEPS_REBASE_ENABLED == 'true'
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY_BOT }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE_BOT }}
          workdir: ${{ inputs.componentName }}
      - name: Perform Rebase
        if: env.STEPS_REBASE_ENABLED == 'true'
        run: |
          cd ${{ inputs.componentName }}
          git config user.name fropenbanking
          git config user.email obst@forgerock.com
          git merge origin/${{ inputs.sourceBranch }} || { echo "Conflicts found, unable to rebase" && exit 1; }
          git push --force-with-lease
      # Get Webhook from GSM
      - name: Get Webhook URL from GSM
        if: failure()
        run: |
          echo "SLACK_WEBHOOK=$(gcloud --project ${{ vars.SAPIG_PROJECT }} secrets versions access latest --secret=${{ vars.GSM_SBAT_WEBOOK_NAME }})" >> $GITHUB_ENV
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          MSG_MINIMAL: commit
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: A Manual rebase of ${{ inputs.sourceBranch }} to ${{ inputs.targetBranch }} is required for repo '${{ inputs.componentName }}'
          SLACK_TITLE: Auto Merge Failure
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}