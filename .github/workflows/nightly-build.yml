name: Nightly Build
on:
  schedule:
    - cron: '0 3 * * 1-5' # UTC
  workflow_dispatch:
jobs:
  build-openig-nightly:
    name: Build OpenIG Nightly
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        uses: ./.github/actions/authentication
        with: 
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ vars.GAR_LOCATION }}
      - name: Set Maven Config
        uses: ./.github//actions/set-maven-config
        with:
          javaArchitecture: x64
          javaDistribution: zulu
          javaVersion: 17
      # Build Core with Latest IG
      - name: Call build-image-and-artifact for Core with Latest IG
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: ${{ vars.LATEST_CORE_SAPIG_BRANCH }}
          checkoutCode: true
          dockerBuildCommands: make clean && make docker tag=latestig setlatest=false mavenArgs="-Dopenig.version=${{ vars.LATEST_IG_ARTIFACT_VERSION }}" dockerArgs="--build-arg base_image=${{ vars.LATEST_IG_DOCKER_IMAGE }}"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-core
      # Build OB V3 with Latest Core Components
      - name: Call build-image-and-artifact for OB with latest IG
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          dockerBuildCommands: make docker tag=latestig setlatest=false mavenArgs="-Dsecure-api-gateway.version=${{ vars.LATEST_CORE_ARTIFACT_VERSION }}" dockerArgs="--build-arg base_image=${{ vars.LATEST_IG_DOCKER_IMAGE }}"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk
  build-sapig-nightly:
    name: Build SAPIG Nightly
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout CI Code
        uses: actions/checkout@v4
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        uses: ./.github/actions/authentication
        with:
          gcpKey: ${{ secrets.DEV_GAR_KEY }}
          garLocation: ${{ vars.GAR_LOCATION }}
      - name: Set Maven Config
        uses: ./.github//actions/set-maven-config
        with:
          javaArchitecture: x64
          javaDistribution: zulu
          javaVersion: 17
      # Build V3 Components
      - name: Call build-artifact for Parent
        uses: ./.github/actions/build-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -U install"
          repositoryName: SecureApiGateway/secure-api-gateway-parent
      - name: Call build-artifact for Common
        uses: ./.github/actions/build-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy --file pom.xml"
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk-common
      - name: Call build-image-and-artifact for Test Trusted Directory
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutCode: true
          dockerBuildCommands: "make clean docker tag=latest"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-test-trusted-directory
      - name: Call build-image-and-artifact for Core
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutCode: true
          dockerBuildCommands: "make clean docker tag=latest && make clean docker tag=dev env=dev"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-core
      - name: Call build-image-and-artifact for OB
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          dockerBuildCommands: "make clean docker tag=latest && make clean docker tag=dev env=dev"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests"
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk
      - name: Call build-image-and-artifact for RCS
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          dockerBuildCommands: "make docker tag=latest"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "make verify && mvn -B deploy -DskipTests -DskipITs -DdockerCompose.skip -Ddockerfile.skip"
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk-rcs
      - name: Call build-image-and-artifact for RS
        uses: ./.github/actions/build-image-and-artifact
        with:
          checkoutBranch: master
          checkoutCode: true
          dockerBuildCommands: "make docker tag=latest"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          mavenBuildCommands: "mvn -B deploy -DskipTests -DskipITs -DdockerCompose.skip -Ddockerfile.skip"
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk-rs
      - name: Call build-image for Core Functional Tests
        uses: ./.github/actions/build-image
        with:
          checkoutCode: true
          dockerBuildCommands: "make docker tag=latest"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: SecureApiGateway/secure-api-gateway-functional-test-framework
      - name: Call build-image for OB Functional Tests
        uses: ./.github/actions/build-image
        with:
          checkoutBranch: master
          checkoutCode: true
          dockerBuildCommands: "make docker tag=latest"
          FR_ARTIFACTORY_USER: ${{ secrets.FR_ARTIFACTORY_USER }}
          FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD: ${{ secrets.FR_ARTIFACTORY_USER_ENCRYPTED_PASSWORD }}
          repositoryName: SecureApiGateway/secure-api-gateway-ob-uk-functional-tests
      # Auth GCP, SDK & Artifact Registry
      - name: Call Authentication
        if: failure()
        uses: ./.github/actions/authentication
        with:
          gcpKey: ${{ secrets.GCP_SECRET_READ }}
          garLocation: ${{ vars.GAR_LOCATION }}
      # Get Webhook from GSM
      - name: Get Webhook URL from GSM
        if: failure()
        run: |
          echo "SLACK_WEBHOOK=$(gcloud --project ${{ vars.SAPIG_PROJECT }} secrets versions access latest --secret=${{ vars.GSM_SBAT_WEBOOK_NAME }})" >> $GITHUB_ENV
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          MSG_MINIMAL: commit
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: Please check the link in the message
          SLACK_TITLE: Nightly Components Build Failed
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
